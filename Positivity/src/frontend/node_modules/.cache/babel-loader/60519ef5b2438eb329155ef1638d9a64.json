{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  positivitydbschema_person {\\n    name\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport Chart from 'react-google-charts';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\nconst SkillChart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        hoursData = _useState2[0],\n        setData = _useState2[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => setData(result.data.positivitydbschema_person));\n    } catch (e) {\n      console.log(e);\n    }\n  });\n  const chartData = hoursData.map(hours => {\n    return ['jee', 8.94, '#b87333', null];\n  });\n  return React.createElement(Component, {\n    initialState: {\n      dataLoadingStatus: 'loading',\n      chartData: []\n    },\n    didMount: async function (component) {\n      const response = await fetch('https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CAD');\n      const json = await response.json();\n      const rateCurrencyNames = Object.keys(json.rates);\n      const rateCurrencyValues = Object.values(json.rates);\n      const chartData = [['Currency Name', 'Currency Rate']];\n\n      for (let i = 0; i < rateCurrencyNames.length; i += 1) {\n        chartData.push([rateCurrencyNames[i], rateCurrencyValues[i]]);\n      }\n\n      component.setState({\n        dataLoadingStatus: 'ready',\n        chartData: chartData\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, component => {\n    return component.state.dataLoadingStatus === 'ready' ? React.createElement(Chart, {\n      chartType: \"BarChart\",\n      data: component.state.chartData,\n      options: {\n        chartArea: {\n          width: '50%'\n        },\n        title: 'EUR Price'\n      },\n      rootProps: {\n        'data-testid': '1'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Fetching data from API\");\n  });\n};\n\nexport default SkillChart;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js"],"names":["React","useState","useEffect","Chart","InMemoryCache","HttpLink","ApolloClient","gql","SkillChart","hoursData","setData","cache","link","uri","client","query","then","result","data","positivitydbschema_person","e","console","log","chartData","map","hours","dataLoadingStatus","component","response","fetch","json","rateCurrencyNames","Object","keys","rates","rateCurrencyValues","values","i","length","push","setState","state","chartArea","width","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from 'react-google-charts';\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloClient} from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\n\nconst SkillChart = () => {\n\n    const [hoursData, setData] = useState([]);\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n        try {\n            client\n                .query({\n                    query: gql`\n{\n  positivitydbschema_person {\n    name\n    id\n  }\n}\n    `\n                })\n                .then(result => setData(result.data.positivitydbschema_person));\n\n        } catch (e) {\n            console.log(e)\n\n        }\n    });\n\n\n    const chartData = hoursData.map(hours => {\n        return (\n            ['jee', 8.94, '#b87333', null]\n        )\n    })\n\n return (\n     <Component\n         initialState={{ dataLoadingStatus: 'loading', chartData: [] }}\n         didMount={async function(component) {\n             const response = await fetch(\n                 'https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CAD',\n             )\n             const json = await response.json()\n             const rateCurrencyNames = Object.keys(json.rates)\n             const rateCurrencyValues = Object.values(json.rates)\n             const chartData = [['Currency Name', 'Currency Rate']]\n             for (let i = 0; i < rateCurrencyNames.length; i += 1) {\n                 chartData.push([rateCurrencyNames[i], rateCurrencyValues[i]])\n             }\n             component.setState({\n                 dataLoadingStatus: 'ready',\n                 chartData: chartData,\n             })\n         }}\n     >\n         {component => {\n             return component.state.dataLoadingStatus === 'ready' ? (\n                 <Chart\n                     chartType=\"BarChart\"\n                     data={component.state.chartData}\n                     options={{\n                         chartArea: {\n                             width: '50%',\n                         },\n                         title: 'EUR Price',\n                     }}\n                     rootProps={{ 'data-testid': '1' }}\n                 />\n             ) : (\n                 <div>Fetching data from API</div>\n             )\n         }}\n     </Component>\n )\n}\n\nexport default SkillChart"]},"metadata":{},"sourceType":"module"}