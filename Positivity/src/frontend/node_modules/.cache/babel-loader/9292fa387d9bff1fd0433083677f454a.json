{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/MessageList.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n      query GetLaunch {\\n        launch(id: 56) {\\n          id\\n          mission {\\n            name\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst Messagelist = () => {\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  client.query({\n    query: gql(_templateObject())\n  }).then(result => console.log(result));\n  useEffect(() => {}, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, data.map(message => {\n    return React.createElement(\"li\", {\n      key: message.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, message.message));\n  }), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })));\n};\n\nexport default Messagelist;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/MessageList.js"],"names":["React","useState","useEffect","axios","useQuery","gql","ApolloClient","InMemoryCache","HttpLink","Messagelist","cache","link","uri","client","data","setData","query","then","result","console","log","map","message","id"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAEtB,QAAMC,KAAK,GAAG,IAAIH,aAAJ,EAAd;AACA,QAAMI,IAAI,GAAG,IAAIH,QAAJ,CAAa;AACtBI,IAAAA,GAAG,EAAE;AADiB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC5BI,IAAAA,KAD4B;AAE5BC,IAAAA;AAF4B,GAAjB,CAAf;;AAPsB,oBAYEV,QAAQ,CAAC,EAAD,CAZV;AAAA;AAAA,QAYfa,IAZe;AAAA,QAYTC,OAZS;;AAatBF,EAAAA,MAAM,CACDG,KADL,CACW;AACHA,IAAAA,KAAK,EAAEX,GAAF;AADF,GADX,EAaKY,IAbL,CAaUC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAbpB;AAcAhB,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;AAKA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKY,IAAI,CAACO,GAAL,CAASC,OAAO,IAAI;AACjB,WACI;AACA,MAAA,GAAG,EAAEA,OAAO,CAACC,EADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,OAAO,CAACA,OAAb,CAHA,CADJ;AAOH,GARA,CADL,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CAFJ,CADJ;AAmBH,CAnDD;;AAqDA,eAAeb,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst Messagelist = () => {\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    const [data, setData] = useState([]);\n    client\n        .query({\n            query: gql`\n      query GetLaunch {\n        launch(id: 56) {\n          id\n          mission {\n            name\n          }\n        }\n      }\n    `\n        })\n        .then(result => console.log(result));\n    useEffect(() => {\n\n    }, []);\n\n\n    return (\n        <div>\n\n            <ul>\n                {data.map(message => {\n                    return (\n                        <li\n                        key={message.id}\n                        >\n                        <h1>{message.message}</h1>\n                        </li>\n                    )\n                })}\n                <li>\n\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Messagelist;"]},"metadata":{},"sourceType":"module"}