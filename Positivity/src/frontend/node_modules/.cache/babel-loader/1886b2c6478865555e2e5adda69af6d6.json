{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/InputForm.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\nmutation {\\n  insert_positivitydbschema_developedskill(objects: {hours: 10, skillid: 2, personid: 1}) {\\n    affected_rows\\n  }\\n}\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n  positivitydbschema_skill {\\n    name\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport useForm from 'react-hook-form';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport Select from \"react-select\";\n\nconst InputForm = initialState => {\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit;\n\n  const onSubmit = data => console.log(data);\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropdowndata = _useState2[0],\n        setDropDownData = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selected = _useState4[0],\n        setselected = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selectedNumber = _useState6[0],\n        setselectedNumber = _useState6[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => setDropDownData(result.data.positivitydbschema_skill.map(skills => ({\n        value: skills.id,\n        label: skills.name\n      }))));\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n\n  const makeGraphqlQueryToInsertDevelopedSkill = () => {\n    client.mutate({\n      mutation: gql(_templateObject2())\n    }).then(result => console.log(result, \"Resulttina oli t채m채\"));\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: makeGraphqlQueryToInsertDevelopedSkill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Select, {\n    name: \"DropDownSelect\",\n    ref: register({\n      required: true,\n      maxlength: 20\n    }),\n    options: dropdowndata,\n    values: [],\n    onChange: value => setselected(value.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    name: \"hours\",\n    type: \"number\",\n    ref: register({\n      min: 0,\n      max: 100\n    }),\n    onChange: event => setselectedNumber(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }));\n};\n\nexport default InputForm;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/InputForm.js"],"names":["React","useEffect","useState","useForm","InMemoryCache","HttpLink","ApolloClient","gql","Select","InputForm","initialState","register","handleSubmit","onSubmit","data","console","log","dropdowndata","setDropDownData","selected","setselected","selectedNumber","setselectedNumber","cache","link","uri","client","query","then","result","positivitydbschema_skill","map","skills","value","id","label","name","e","makeGraphqlQueryToInsertDevelopedSkill","mutate","mutation","required","maxlength","min","max","event","target"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport useForm from 'react-hook-form'\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloClient} from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport Select from \"react-select\";\n\nconst InputForm = initialState =>  {\n    const { register, handleSubmit } = useForm()\n    const onSubmit = data => console.log(data)\n    const [dropdowndata, setDropDownData] = useState();\n    const [selected, setselected] = useState();\n    const [selectedNumber, setselectedNumber] = useState();\n\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n        try {\n            client\n                .query({\n                    query: gql`\n {\n  positivitydbschema_skill {\n    name\n    id\n  }\n}\n    `\n                })\n                .then(result => setDropDownData(result.data.positivitydbschema_skill.map(skills => ({\n                    value: skills.id,\n                    label: skills.name\n                }))))\n\n\n        } catch (e) {\n            console.log(e)\n\n        }\n    }, [])\n\n\n    const makeGraphqlQueryToInsertDevelopedSkill = () => {\n\n        client\n            .mutate({\n                mutation: gql`\nmutation {\n  insert_positivitydbschema_developedskill(objects: {hours: 10, skillid: 2, personid: 1}) {\n    affected_rows\n  }\n}`\n\n            }).then(result => console.log(result, \"Resulttina oli t채m채\"))}\n\n\n\n    return (\n        <form onSubmit={makeGraphqlQueryToInsertDevelopedSkill}>\n            <Select name=\"DropDownSelect\" ref={register({ required: true, maxlength: 20 })} options={dropdowndata}\n                    values={[]}\n                    onChange={(value) => setselected(value.value)}\n                    />\n            <input name=\"hours\" type=\"number\" ref={register({ min: 0, max: 100 })}\n                   onChange={(event) => setselectedNumber(event.target.value)}/>\n            <input type=\"submit\" />\n        </form>\n    );\n}\n\nexport default InputForm"]},"metadata":{},"sourceType":"module"}