{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  positivitydbschema_person {\\n    name\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport Chart from 'react-google-charts';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\nconst SkillChart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        hoursData = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        dataToChart = _useState4[0],\n        setDataToChart = _useState4[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => setData(result.data.positivitydbschema_person));\n    } catch (e) {\n      console.log(e);\n    }\n  });\n  var Lista = [[\"miko\", \"Lenght\"], [\"Miko\", 10]];\n  useEffect(() => {\n    var dataArray = [];\n    var chartDataArray = [];\n    chartDataArray.push([\"People\", \"Lenght\"]);\n    const supaData = hoursData.map(hours => {\n      dataArray = [hours.name, hours.id];\n      chartDataArray.push(dataArray);\n      setDataToChart(JSON.stringify(chartDataArray));\n    });\n  });\n  return React.createElement(Chart, {\n    width: '500px',\n    height: '300px',\n    chartType: \"BarChart\",\n    loader: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Loading Chart\"),\n    data: dataToChar,\n    options: {\n      title: 'Hours spent on',\n      width: 600,\n      height: 400,\n      bar: {\n        groupWidth: '95%'\n      },\n      legend: {\n        position: 'none'\n      }\n    } // For tests\n    ,\n    rootProps: {\n      'data-testid': '6'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  });\n};\n\nexport default SkillChart;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js"],"names":["React","useState","useEffect","Chart","InMemoryCache","HttpLink","ApolloClient","gql","SkillChart","hoursData","setData","dataToChart","setDataToChart","cache","link","uri","client","query","then","result","data","positivitydbschema_person","e","console","log","Lista","dataArray","chartDataArray","push","supaData","map","hours","name","id","JSON","stringify","dataToChar","title","width","height","bar","groupWidth","legend","position"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA,oBAEQP,QAAQ,CAAC,EAAD,CAFhB;AAAA;AAAA,QAEdQ,SAFc;AAAA,QAEHC,OAFG;;AAAA,qBAGiBT,QAAQ,CAAC,EAAD,CAHzB;AAAA;AAAA,QAGdU,WAHc;AAAA,QAGDC,cAHC;;AAKrB,QAAMC,KAAK,GAAG,IAAIT,aAAJ,EAAd;AACA,QAAMU,IAAI,GAAG,IAAIT,QAAJ,CAAa;AACtBU,IAAAA,GAAG,EAAE;AADiB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC5BO,IAAAA,KAD4B;AAE5BC,IAAAA;AAF4B,GAAjB,CAAf;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI;AACAc,MAAAA,MAAM,CACDC,KADL,CACW;AACHA,QAAAA,KAAK,EAAEV,GAAF;AADF,OADX,EAWKW,IAXL,CAWUC,MAAM,IAAIT,OAAO,CAACS,MAAM,CAACC,IAAP,CAAYC,yBAAb,CAX3B;AAeH,KAhBD,CAgBE,OAAOC,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEH;AACJ,GArBQ,CAAT;AAwBA,MAAIG,KAAK,GAAG,CAAC,CAAC,MAAD,EAAS,QAAT,CAAD,EAAqB,CAAC,MAAD,EAAS,EAAT,CAArB,CAAZ;AAIJvB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwB,SAAS,GAAG,EAAhB;AACA,QAAIC,cAAc,GAAG,EAArB;AACIA,IAAAA,cAAc,CAACC,IAAf,CAAoB,CAAC,QAAD,EAAW,QAAX,CAApB;AACA,UAAMC,QAAQ,GAAGpB,SAAS,CAACqB,GAAV,CAAcC,KAAK,IAAI;AACpCL,MAAAA,SAAS,GAAG,CAACK,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACE,EAAnB,CAAZ;AACAN,MAAAA,cAAc,CAACC,IAAf,CAAoBF,SAApB;AACAd,MAAAA,cAAc,CAACsB,IAAI,CAACC,SAAL,CAAeR,cAAf,CAAD,CAAd;AACH,KAJgB,CAAjB;AAQP,GAZQ,CAAT;AAiBC,SAEG,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,OADX;AAEI,IAAA,MAAM,EAAE,OAFZ;AAGI,IAAA,SAAS,EAAC,UAHd;AAII,IAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJZ;AAKI,IAAA,IAAI,EAAES,UALV;AAMI,IAAA,OAAO,EAAE;AACLC,MAAAA,KAAK,EAAE,gBADF;AAELC,MAAAA,KAAK,EAAE,GAFF;AAGLC,MAAAA,MAAM,EAAE,GAHH;AAILC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAJA;AAKLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AALH,KANb,CAaI;AAbJ;AAcI,IAAA,SAAS,EAAE;AAAE,qBAAe;AAAjB,KAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH;AAqBA,CAjFD;;AAmFA,eAAenC,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from 'react-google-charts';\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloClient} from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\n\nconst SkillChart = () => {\n\n    const [hoursData, setData] = useState([]);\n    const [dataToChart, setDataToChart] = useState([]);\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n        try {\n            client\n                .query({\n                    query: gql`\n{\n  positivitydbschema_person {\n    name\n    id\n  }\n}\n    `\n                })\n                .then(result => setData(result.data.positivitydbschema_person));\n\n\n\n        } catch (e) {\n            console.log(e)\n\n        }\n    });\n\n\n    var Lista = [[\"miko\", \"Lenght\"], [\"Miko\", 10]]\n\n\n\nuseEffect(() => {\n    var dataArray = [];\n    var chartDataArray = [];\n        chartDataArray.push([\"People\", \"Lenght\"])\n        const supaData = hoursData.map(hours => {\n            dataArray = [hours.name, hours.id]\n            chartDataArray.push(dataArray)\n            setDataToChart(JSON.stringify(chartDataArray))\n        })\n\n\n\n})\n\n\n\n\n return (\n\n    <Chart\n        width={'500px'}\n        height={'300px'}\n        chartType=\"BarChart\"\n        loader={<div>Loading Chart</div>}\n        data={dataToChar}\n        options={{\n            title: 'Hours spent on',\n            width: 600,\n            height: 400,\n            bar: { groupWidth: '95%' },\n            legend: { position: 'none' },\n        }}\n        // For tests\n        rootProps={{ 'data-testid': '6' }}\n    />\n\n    )\n\n}\n\nexport default SkillChart"]},"metadata":{},"sourceType":"module"}