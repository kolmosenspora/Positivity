{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  developedskill(where: {personid: {_eq: 1}}) {\\n    hours\\n    skill {\\n      name\\n      id\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport Chart from 'react-google-charts';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\nconst SkillChart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataToChart = _useState2[0],\n        setDataToChart = _useState2[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  var dataArray = [];\n  var chartDataArray = [];\n  chartDataArray.push([\"Skills\", \"Hours spent\"]);\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => result.data.developedskill.map(hours => {\n        dataArray = [hours.skill.name, hours.hours];\n        chartDataArray.push(dataArray);\n        setDataToChart(chartDataArray);\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Chart, {\n    width: '500px',\n    height: '300px',\n    chartType: \"BarChart\",\n    loader: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Loading Chart\"),\n    data: dataToChart,\n    options: {\n      title: 'Hours spent on',\n      width: 600,\n      height: 400,\n      bar: {\n        groupWidth: '95%'\n      },\n      legend: {\n        position: 'none'\n      }\n    } // For tests\n    ,\n    rootProps: {\n      'data-testid': '6'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Jee jee\"));\n};\n\nexport default SkillChart;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js"],"names":["React","useState","useEffect","Chart","InMemoryCache","HttpLink","ApolloClient","gql","SkillChart","dataToChart","setDataToChart","cache","link","uri","dataArray","chartDataArray","push","client","query","then","result","data","developedskill","map","hours","skill","name","e","console","log","title","width","height","bar","groupWidth","legend","position"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA,oBAEiBP,QAAQ,CAAC,EAAD,CAFzB;AAAA;AAAA,QAEdQ,WAFc;AAAA,QAEDC,cAFC;;AAIrB,QAAMC,KAAK,GAAG,IAAIP,aAAJ,EAAd;AACA,QAAMQ,IAAI,GAAG,IAAIP,QAAJ,CAAa;AACtBQ,IAAAA,GAAG,EAAE;AADiB,GAAb,CAAb;AAIA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,cAAc,GAAG,EAArB;AACAA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAAC,QAAD,EAAW,aAAX,CAApB;AAEA,QAAMC,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC5BK,IAAAA,KAD4B;AAE5BC,IAAAA;AAF4B,GAAjB,CAAf;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI;AACAe,MAAAA,MAAM,CACDC,KADL,CACW;AACHA,QAAAA,KAAK,EAAEX,GAAF;AADF,OADX,EAcKY,IAdL,CAcUC,MAAM,IAAIA,MAAM,CAACC,IAAP,CAAYC,cAAZ,CAA2BC,GAA3B,CAA+BC,KAAK,IAAI;AACpDV,QAAAA,SAAS,GAAG,CAACU,KAAK,CAACC,KAAN,CAAYC,IAAb,EAAmBF,KAAK,CAACA,KAAzB,CAAZ;AACAT,QAAAA,cAAc,CAACC,IAAf,CAAoBF,SAApB;AACAJ,QAAAA,cAAc,CAACK,cAAD,CAAd;AACH,OAJe,CAdpB;AAoBH,KArBD,CAqBE,OAAOY,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEH;AAKJ,GA9BQ,EA8BN,EA9BM,CAAT;AAmCH,SACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,OADX;AAEI,IAAA,MAAM,EAAE,OAFZ;AAGI,IAAA,SAAS,EAAC,UAHd;AAII,IAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJZ;AAKI,IAAA,IAAI,EAAElB,WALV;AAMI,IAAA,OAAO,EAAE;AACLqB,MAAAA,KAAK,EAAE,gBADF;AAELC,MAAAA,KAAK,EAAE,GAFF;AAGLC,MAAAA,MAAM,EAAE,GAHH;AAILC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAJA;AAKLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AALH,KANb,CAaI;AAbJ;AAcI,IAAA,SAAS,EAAE;AAAE,qBAAe;AAAjB,KAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAiBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBJ,CADC;AAuBA,CA5ED;;AA8EA,eAAe5B,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from 'react-google-charts';\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloClient} from \"apollo-client\";\nimport gql from \"graphql-tag\";\n\n\nconst SkillChart = () => {\n\n    const [dataToChart, setDataToChart] = useState([]);\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    var dataArray = [];\n    var chartDataArray = [];\n    chartDataArray.push([\"Skills\", \"Hours spent\"])\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n        try {\n            client\n                .query({\n                    query: gql`\n{\n  developedskill(where: {personid: {_eq: 1}}) {\n    hours\n    skill {\n      name\n      id\n    }\n  }\n}\n    `\n                })\n                .then(result => result.data.developedskill.map(hours => {\n                    dataArray = [hours.skill.name, hours.hours]\n                    chartDataArray.push(dataArray)\n                    setDataToChart(chartDataArray)\n                }))\n\n        } catch (e) {\n            console.log(e)\n\n        }\n\n\n\n\n    }, []);\n\n\n\n\n return (\n<div>\n    <Chart\n        width={'500px'}\n        height={'300px'}\n        chartType=\"BarChart\"\n        loader={<div>Loading Chart</div>}\n        data={dataToChart}\n        options={{\n            title: 'Hours spent on',\n            width: 600,\n            height: 400,\n            bar: { groupWidth: '95%' },\n            legend: { position: 'none' },\n        }}\n        // For tests\n        rootProps={{ 'data-testid': '6' }}\n    />\n    <h1>Jee jee</h1>\n</div>\n\n    )\n\n}\n\nexport default SkillChart"]},"metadata":{},"sourceType":"module"}