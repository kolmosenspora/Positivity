{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  positivitydbschema_person {\\n    name\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Chart from 'react-google-charts';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\n\nconst SkillChart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        hoursData = _useState2[0],\n        setData = _useState2[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => setData(result.data.positivitydbschema_person));\n    } catch (e) {\n      console.log(e);\n    }\n  });\n  const hoursList = hoursData.map(() => {});\n  return React.createElement(Chart, {\n    width: '500px',\n    height: '300px',\n    chartType: \"BarChart\",\n    loader: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Loading Chart\"),\n    data: [['Element', 'Density', {\n      role: 'style'\n    }, {\n      sourceColumn: 0,\n      role: 'annotation',\n      type: 'string',\n      calc: 'stringify'\n    }], ['Copper 8,94', 8.94, '#b87333', null]],\n    options: {\n      title: 'Hours spent on',\n      width: 600,\n      height: 400,\n      bar: {\n        groupWidth: '95%'\n      },\n      legend: {\n        position: 'none'\n      }\n    } // For tests\n    ,\n    rootProps: {\n      'data-testid': '6'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  });\n};\n\nexport default SkillChart;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/SkillChart.js"],"names":["React","Chart","InMemoryCache","HttpLink","ApolloClient","SkillChart","useState","hoursData","setData","cache","link","uri","client","useEffect","query","gql","then","result","data","positivitydbschema_person","e","console","log","hoursList","map","role","sourceColumn","type","calc","title","width","height","bar","groupWidth","legend","position"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,YAAR,QAA2B,eAA3B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA,oBAEQC,QAAQ,CAAC,EAAD,CAFhB;AAAA;AAAA,QAEdC,SAFc;AAAA,QAEHC,OAFG;;AAIrB,QAAMC,KAAK,GAAG,IAAIP,aAAJ,EAAd;AACA,QAAMQ,IAAI,GAAG,IAAIP,QAAJ,CAAa;AACtBQ,IAAAA,GAAG,EAAE;AADiB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5BK,IAAAA,KAD4B;AAE5BC,IAAAA;AAF4B,GAAjB,CAAf;AAKAG,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI;AACAD,MAAAA,MAAM,CACDE,KADL,CACW;AACHA,QAAAA,KAAK,EAAEC,GAAF;AADF,OADX,EAWKC,IAXL,CAWUC,MAAM,IAAIT,OAAO,CAACS,MAAM,CAACC,IAAP,CAAYC,yBAAb,CAX3B;AAaH,KAdD,CAcE,OAAOC,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEH;AACJ,GAnBQ,CAAT;AAqBA,QAAMG,SAAS,GAAGhB,SAAS,CAACiB,GAAV,CAAc,MAAM,CAErC,CAFiB,CAAlB;AAKA,SACA,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,OADX;AAEI,IAAA,MAAM,EAAE,OAFZ;AAGI,IAAA,SAAS,EAAC,UAHd;AAII,IAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJZ;AAKI,IAAA,IAAI,EAAE,CACF,CACI,SADJ,EAEI,SAFJ,EAGI;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAHJ,EAII;AACIC,MAAAA,YAAY,EAAE,CADlB;AAEID,MAAAA,IAAI,EAAE,YAFV;AAGIE,MAAAA,IAAI,EAAE,QAHV;AAIIC,MAAAA,IAAI,EAAE;AAJV,KAJJ,CADE,EAYF,CAAC,aAAD,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,IAAjC,CAZE,CALV;AAmBI,IAAA,OAAO,EAAE;AACLC,MAAAA,KAAK,EAAE,gBADF;AAELC,MAAAA,KAAK,EAAE,GAFF;AAGLC,MAAAA,MAAM,EAAE,GAHH;AAILC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAJA;AAKLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AALH,KAnBb,CA0BI;AA1BJ;AA2BI,IAAA,SAAS,EAAE;AAAE,qBAAe;AAAjB,KA3Bf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA;AAiCH,CAzED;;AA2EA,eAAe9B,UAAf","sourcesContent":["import React from 'react'\nimport Chart from 'react-google-charts';\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloClient} from \"apollo-client\";\n\nconst SkillChart = () => {\n\n    const [hoursData, setData] = useState([]);\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n        try {\n            client\n                .query({\n                    query: gql`\n{\n  positivitydbschema_person {\n    name\n    id\n  }\n}\n    `\n                })\n                .then(result => setData(result.data.positivitydbschema_person));\n\n        } catch (e) {\n            console.log(e)\n\n        }\n    });\n\n    const hoursList = hoursData.map(() => {\n\n    })\n\n\n    return (\n    <Chart\n        width={'500px'}\n        height={'300px'}\n        chartType=\"BarChart\"\n        loader={<div>Loading Chart</div>}\n        data={[\n            [\n                'Element',\n                'Density',\n                { role: 'style' },\n                {\n                    sourceColumn: 0,\n                    role: 'annotation',\n                    type: 'string',\n                    calc: 'stringify',\n                },\n            ],\n            ['Copper 8,94', 8.94, '#b87333', null],\n        ]}\n        options={{\n            title: 'Hours spent on',\n            width: 600,\n            height: 400,\n            bar: { groupWidth: '95%' },\n            legend: { position: 'none' },\n        }}\n        // For tests\n        rootProps={{ 'data-testid': '6' }}\n    />\n\n    )\n\n}\n\nexport default SkillChart"]},"metadata":{},"sourceType":"module"}