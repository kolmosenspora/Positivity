{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/InputForm.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n  positivitydbschema_skill {\\n    name\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport useForm from 'react-hook-form';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport Select from \"react-select\";\n\nconst InputForm = initialState => {\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit;\n\n  const onSubmit = data => console.log(data);\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropdowndata = _useState2[0],\n        setDropDownData = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selected = _useState4[0],\n        setselected = _useState4[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => result.data.positivitydbschema_skill.map(skills => ({\n        value: skills.id,\n        label: skills.name\n      })));\n    } catch (e) {\n      console.log(e);\n    }\n  });\n  const lista = [{\n    value: 'ocean',\n    label: 'Ocean',\n    color: '#00B8D9',\n    isFixed: true\n  }, {\n    value: 'blue',\n    label: 'Blue',\n    color: '#0052CC',\n    isDisabled: true\n  }, {\n    value: 'purple',\n    label: 'Purple',\n    color: '#5243AA'\n  }, {\n    value: 'red',\n    label: 'Red',\n    color: '#FF5630',\n    isFixed: true\n  }, {\n    value: 'orange',\n    label: 'Orange',\n    color: '#FF8B00'\n  }, {\n    value: 'yellow',\n    label: 'Yellow',\n    color: '#FFC400'\n  }, {\n    value: 'green',\n    label: 'Green',\n    color: '#36B37E'\n  }, {\n    value: 'forest',\n    label: 'Forest',\n    color: '#00875A'\n  }, {\n    value: 'slate',\n    label: 'Slate',\n    color: '#253858'\n  }, {\n    value: 'silver',\n    label: 'Silver',\n    color: '#666666'\n  }];\n  var arrayni = [];\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    name: \"firstName\",\n    ref: register({\n      required: true,\n      maxlength: 20\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    name: \"lastName\",\n    ref: register({\n      pattern: /^[A-Za-z]+$/i\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Select, {\n    options: lista,\n    onChange: console.log(\"jee\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    name: \"age\",\n    type: \"number\",\n    ref: register({\n      min: 0,\n      max: 100\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nexport default InputForm;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/InputForm.js"],"names":["React","useEffect","useState","useForm","InMemoryCache","HttpLink","ApolloClient","gql","Select","InputForm","initialState","register","handleSubmit","onSubmit","data","console","log","dropdowndata","setDropDownData","selected","setselected","cache","link","uri","client","query","then","result","positivitydbschema_skill","map","skills","value","id","label","name","e","lista","color","isFixed","isDisabled","arrayni","required","maxlength","pattern","min","max"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport useForm from 'react-hook-form'\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport {ApolloClient} from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport Select from \"react-select\";\n\nconst InputForm = initialState =>  {\n    const { register, handleSubmit } = useForm()\n    const onSubmit = data => console.log(data)\n    const [dropdowndata, setDropDownData] = useState();\n    const [selected, setselected] = useState();\n\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n        try {\n            client\n                .query({\n                    query: gql`\n {\n  positivitydbschema_skill {\n    name\n    id\n  }\n}\n    `\n                })\n                .then(result => result.data.positivitydbschema_skill.map(skills => ({\n                    value: skills.id,\n                    label: skills.name\n                })))\n\n\n        } catch (e) {\n            console.log(e)\n\n        }\n    })\n\n\n    const lista = [\n        { value: 'ocean', label: 'Ocean', color: '#00B8D9', isFixed: true },\n        { value: 'blue', label: 'Blue', color: '#0052CC', isDisabled: true },\n        { value: 'purple', label: 'Purple', color: '#5243AA' },\n        { value: 'red', label: 'Red', color: '#FF5630', isFixed: true },\n        { value: 'orange', label: 'Orange', color: '#FF8B00' },\n        { value: 'yellow', label: 'Yellow', color: '#FFC400' },\n        { value: 'green', label: 'Green', color: '#36B37E' },\n        { value: 'forest', label: 'Forest', color: '#00875A' },\n        { value: 'slate', label: 'Slate', color: '#253858' },\n        { value: 'silver', label: 'Silver', color: '#666666' },\n    ];\n    var arrayni = []\n\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input name=\"firstName\" ref={register({ required: true, maxlength: 20 })} />\n            <input name=\"lastName\" ref={register({ pattern: /^[A-Za-z]+$/i })} />\n            <Select options={lista}\n                    onChange={console.log(\"jee\")}/>\n            <input name=\"age\" type=\"number\" ref={register({ min: 0, max: 100 })} />\n            <input type=\"submit\" />\n        </form>\n    );\n}\n\nexport default InputForm"]},"metadata":{},"sourceType":"module"}