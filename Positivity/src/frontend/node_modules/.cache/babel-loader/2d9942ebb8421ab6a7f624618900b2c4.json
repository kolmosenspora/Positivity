{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/MessageList.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  positivitydbschema_person {\\n    name\\n    id\\n  }\\n}\\n\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport gql from \"graphql-tag\";\n\nconst Messagelist = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  useEffect(() => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => setData(result.data.positivitydbschema_developedskill));\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\n  const logita = () => {\n    console.log(data);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: logita,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"moi\")));\n};\n\nexport default Messagelist;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/MessageList.js"],"names":["React","useState","useEffect","axios","ApolloClient","InMemoryCache","HttpLink","gql","Messagelist","data","setData","cache","link","uri","client","query","then","result","positivitydbschema_developedskill","e","console","log","logita"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA,oBAEEP,QAAQ,CAAC,EAAD,CAFV;AAAA;AAAA,QAEfQ,IAFe;AAAA,QAETC,OAFS;;AAItB,QAAMC,KAAK,GAAG,IAAIN,aAAJ,EAAd;AACA,QAAMO,IAAI,GAAG,IAAIN,QAAJ,CAAa;AACtBO,IAAAA,GAAG,EAAE;AADiB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC5BO,IAAAA,KAD4B;AAE5BC,IAAAA;AAF4B,GAAjB,CAAf;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACR,QAAI;AACAY,MAAAA,MAAM,CACDC,KADL,CACW;AACHA,QAAAA,KAAK,EAAER,GAAF;AADF,OADX,EAYKS,IAZL,CAYUC,MAAM,IAAIP,OAAO,CAACO,MAAM,CAACR,IAAP,CAAYS,iCAAb,CAZ3B;AAcH,KAfD,CAeE,OAAOC,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEH;AACR,GApBQ,CAAT;;AAuBJ,QAAMG,MAAM,GAAG,MAAM;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACP,GAFD;;AAII,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,OAAO,EAAEa,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAFJ,CADJ;AAiBH,CA1DD;;AA4DA,eAAed,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport gql from \"graphql-tag\";\n\nconst Messagelist = () => {\n\n    const [data, setData] = useState([]);\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    useEffect(() => {\n            try {\n                client\n                    .query({\n                        query: gql`\n{\n  positivitydbschema_person {\n    name\n    id\n  }\n}\n\n    `\n                    })\n                    .then(result => setData(result.data.positivitydbschema_developedskill));\n\n            } catch (e) {\n                console.log(e)\n\n            }\n    })\n\n\nconst logita = () => {\n        console.log(data)\n}\n\n    return (\n        <div>\n\n            <ul>\n                <p onClick={logita}>moi</p>\n{/*                {data.map(ihminen => {\n                return (\n                <li\n                key={ihminen.id}\n                >\n                <h1>{ihminen.name}</h1>\n                </li>\n                );\n            })}*/}\n            </ul>\n        </div>\n    );\n};\n\nexport default Messagelist;"]},"metadata":{},"sourceType":"module"}