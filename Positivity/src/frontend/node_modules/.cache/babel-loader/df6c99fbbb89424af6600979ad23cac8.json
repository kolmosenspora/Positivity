{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/MessageList.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  positivitydbschema_developedskill {\\n    person {\\n      name\\n      developedskills {\\n        skill {\\n          name\\n        }\\n        }\\n      }\\n    }\\n  }\\n\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport gql from \"graphql-tag\";\n\nconst Messagelist = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'http://localhost:8080/v1/graphql'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n\n  const fetchDataFromGraphql = () => {\n    try {\n      client.query({\n        query: gql(_templateObject())\n      }).then(result => setData(result.data));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Moi\"))));\n};\n\nexport default Messagelist;","map":{"version":3,"sources":["/Users/miko.kallio/hasuratesting/Positivity/Positivity/src/frontend/src/MessageList.js"],"names":["React","useState","useEffect","axios","ApolloClient","InMemoryCache","HttpLink","gql","Messagelist","data","setData","cache","link","uri","client","fetchDataFromGraphql","query","then","result","e","console","log"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA,oBAEEP,QAAQ,CAAC,EAAD,CAFV;AAAA;AAAA,QAEfQ,IAFe;AAAA,QAETC,OAFS;;AAItB,QAAMC,KAAK,GAAG,IAAIN,aAAJ,EAAd;AACA,QAAMO,IAAI,GAAG,IAAIN,QAAJ,CAAa;AACtBO,IAAAA,GAAG,EAAE;AADiB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC5BO,IAAAA,KAD4B;AAE5BC,IAAAA;AAF4B,GAAjB,CAAf;;AAMH,QAAMG,oBAAoB,GAAG,MAAM;AAEhC,QAAI;AACAD,MAAAA,MAAM,CACDE,KADL,CACW;AACHA,QAAAA,KAAK,EAAET,GAAF;AADF,OADX,EAkBKU,IAlBL,CAkBUC,MAAM,IAAIR,OAAO,CAACQ,MAAM,CAACT,IAAR,CAlB3B;AAoBH,KArBD,CAqBE,OAAOU,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEH;AACH,GA3BD;;AA+BG,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAFJ,CAFJ,CADJ;AAWH,CAzDD;;AA2DA,eAAeX,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport gql from \"graphql-tag\";\n\nconst Messagelist = () => {\n\n    const [data, setData] = useState([]);\n\n    const cache = new InMemoryCache();\n    const link = new HttpLink({\n        uri: 'http://localhost:8080/v1/graphql'\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link\n    });\n\n    \n const fetchDataFromGraphql = () => {\n\n    try {\n        client\n            .query({\n                query: gql`\n{\n  positivitydbschema_developedskill {\n    person {\n      name\n      developedskills {\n        skill {\n          name\n        }\n        }\n      }\n    }\n  }\n\n    `\n            })\n            .then(result => setData(result.data));\n\n    } catch (e) {\n        console.log(e)\n\n    }\n }\n\n\n\n    return (\n        <div>\n\n            <ul>\n\n                <li>\n                    <p>Moi</p>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Messagelist;"]},"metadata":{},"sourceType":"module"}